{"version":3,"file":"ngx-highlightjs.umd.min.js","sources":["../../src/modules/highlight.module.ts","../../src/service/highlight.service.ts","../../src/directives/highlight.directive.ts"],"sourcesContent":["import { InjectionToken, ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { HighlightDirective } from '../directives/highlight.directive';\r\nimport { HighlightService, OPTIONS } from '../service/highlight.service';\r\nimport { HighlightOptions } from '../models/highlight-options';\n/**\n * @param {?} options\n * @return {?}\n */\nexport function HighlightFactory(options: HighlightOptions) {\r\n  return new HighlightService(options);\r\n}\nexport class HighlightModule {\n/**\n * @param {?=} options\n * @return {?}\n */\nstatic forRoot(options?: HighlightOptions): ModuleWithProviders {\r\n    return {\r\n      ngModule: HighlightModule,\r\n      providers: [\r\n        {provide: OPTIONS, useValue: options},\r\n        {\r\n          provide: HighlightService,\r\n          useFactory: HighlightFactory,\r\n          deps: [OPTIONS]\r\n        }\r\n      ]\r\n    };\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\r\n  declarations: [HighlightDirective],\r\n  exports: [HighlightDirective]\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction HighlightModule_tsickle_Closure_declarations() {\n/** @type {?} */\nHighlightModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nHighlightModule.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\r\nimport { HighlightOptions } from '../models/highlight-options';\r\n\r\nexport const /** @type {?} */ OPTIONS = new InjectionToken<HighlightOptions>('OPTIONS');\r\n\r\ndeclare const hljs: any;\nexport class HighlightService {\r\n\r\n  options: HighlightOptions = {\r\n    theme: 'github',\r\n    path: 'assets/lib/hljs',\r\n    auto: true\r\n  };\n/**\n * hljs script on load event\n */\nready$ = new BehaviorSubject(false);\n/**\n * @param {?} options\n */\nconstructor(  options: HighlightOptions) {\r\n\r\n    this.options = {...this.options, ...options};\r\n\r\n    /** Load hljs script and style only once */\r\n    this.loadScript();\r\n    this.loadTheme();\r\n  }\n/**\n * @return {?}\n */\nloadScript() {\r\n    const /** @type {?} */ script = document.createElement('script');\r\n    script.async = true;\r\n    script.type = 'text/javascript';\r\n    script.onload = () => {\r\n      this.ready$.next(true);\r\n    };\r\n    script.src = `${this.options.path}/highlight.pack.js`;\r\n    document.head.appendChild(script);\r\n  }\n/**\n * @return {?}\n */\nloadTheme() {\r\n    const /** @type {?} */ style = document.createElement('link');\r\n    style.rel = 'stylesheet';\r\n    style.type = 'text/css';\r\n    style.href = `${this.options.path}/styles/${this.options.theme}.css`;\r\n    document.head.appendChild(style);\r\n  }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [OPTIONS, ] }, ]},\n];\n}\n\nfunction HighlightService_tsickle_Closure_declarations() {\n/** @type {?} */\nHighlightService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nHighlightService.ctorParameters;\n/** @type {?} */\nHighlightService.prototype.options;\n/**\n * hljs script on load event\n * @type {?}\n */\nHighlightService.prototype.ready$;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ElementRef, Renderer2, OnDestroy, Input, OnInit, HostBinding } from '@angular/core';\r\nimport { HighlightService } from '../service/highlight.service';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { from } from 'rxjs/observable/from';\r\nimport'rxjs/add/operator/map';\r\nimport'rxjs/add/operator/take';\r\nimport'rxjs/add/operator/filter';\r\n\r\n/** Highlight.js library */\r\ndeclare const hljs: any;\n/**\n * There are 2 ways to highlight code\r 1 - Directly using the code input (default)\r 2 - Indirectly using element text content (used of code input is undefined)\n */\nexport class HighlightDirective implements OnInit, OnDestroy {\n/**\n * Element ref\n */\nel: HTMLElement;\n/**\n * Highlight code from text content on changes\n */\ndomObs: MutationObserver;\n/**\n * Code text\n */\ncode: string;\n/**\n * Highlight, can be use to select highlight mode\n */\nhighlight: string;\n/**\n * Highlight code directly\n * @param {?} code\n * @return {?}\n */\nset setCode(code: string) {\r\n    this.code = code;\r\n    this.hl.ready$.filter(ready => ready).take(1)\r\n      .subscribe(() => this.highlightElement(this.el, code));\r\n  }\r\n\r\n   hljsClass = true;\n/**\n * @param {?} el\n * @param {?} renderer\n * @param {?} hl\n */\nconstructor(el: ElementRef,\nprivate renderer: Renderer2,\nprivate hl: HighlightService) {\r\n    this.el = el.nativeElement;\r\n  }\n/**\n * @return {?}\n */\nngOnInit() {\r\n\r\n    /** If code is undefined, highlight using element text content */\r\n    if (!this.code && this.hl.options.auto) {\r\n\r\n      this.hl.ready$\r\n        .filter(ready => ready).take(1)\r\n        .subscribe(() => {\r\n\r\n          this.highlightTextContent();\r\n\r\n          /** Highlight when text content changes */\r\n          this.domObs = new MutationObserver(() => this.highlightTextContent());\r\n          this.domObs.observe(this.el, { childList: true, subtree: true });\r\n        });\r\n    }\r\n  }\n/**\n * Highlight using element text content\n * @return {?}\n */\nhighlightTextContent() {\r\n    if (!this.highlight) {\r\n      /** <code highlight [textContent]=\"code\"></code> */\r\n      if (this.el.tagName.toLowerCase() === 'code') {\r\n        this.highlightElement(this.el, this.el.innerText.trim());\r\n      } else {\r\n        console.warn(`[HighlightDirective]: Use 'highlight' on <code> elements only`);\r\n      }\r\n    } else if (this.highlight === 'all') {\r\n      /** <div highlight=\"all\">\r\n       *    <pre><code [textContent]=\"code\"></code></pre>\r\n       *    <pre><code [textContent]=\"code\"></code></pre>\r\n       *  </div>\r\n       */\r\n      this.highlightChildren(this.el, 'pre code');\r\n    } else {\r\n      /** <div highlight=\"section code\">\r\n       *    <section><code [textContent]=\"code\"></code></section>\r\n       *    <section><code [textContent]=\"code\"></code></section>\r\n       *  </div>\r\n       */\r\n      this.highlightChildren(this.el, this.highlight);\r\n    }\r\n  }\n/**\n * Highlight single element\n * @param {?} el\n * @param {?} code\n * @return {?}\n */\nhighlightElement(el: HTMLElement, code: string) {\r\n\r\n    const /** @type {?} */ highlightedCode = hljs.highlightAuto(code).value;\r\n\r\n    if (highlightedCode !== el.innerHTML) {\r\n      this.renderer.setProperty(el, 'innerHTML', highlightedCode);\r\n    }\r\n  }\n/**\n * Highlight children\n * @param {?} el\n * @param {?} selector\n * @return {?}\n */\nhighlightChildren(el: HTMLElement, selector: string) {\r\n\r\n    const /** @type {?} */ codeElements = el.querySelectorAll(selector);\r\n\r\n    /** highlight all children with the same selector */\r\n    from(codeElements)\r\n      .filter((code: HTMLElement) => code.childNodes.length === 1 && code.childNodes[0].nodeName === '#text')\r\n      .map((codeElement: HTMLElement) => {\r\n        this.highlightElement(codeElement, codeElement.innerText.trim());\r\n      })\r\n      .take(1)\r\n      .subscribe();\r\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\r\n    /** Disconnect MutationObserver */\r\n    if (!this.code && this.hl.options.auto) {\r\n      this.domObs.disconnect();\r\n    }\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: '[highlight]'\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: HighlightService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'highlight': [{ type: Input },],\n'setCode': [{ type: Input, args: ['code', ] },],\n'hljsClass': [{ type: HostBinding, args: ['class.hljs', ] },],\n};\n}\n\nfunction HighlightDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nHighlightDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nHighlightDirective.ctorParameters;\n/** @type {?} */\nHighlightDirective.propDecorators;\n/**\n * Element ref\n * @type {?}\n */\nHighlightDirective.prototype.el;\n/**\n * Highlight code from text content on changes\n * @type {?}\n */\nHighlightDirective.prototype.domObs;\n/**\n * Code text\n * @type {?}\n */\nHighlightDirective.prototype.code;\n/**\n * Highlight, can be use to select highlight mode\n * @type {?}\n */\nHighlightDirective.prototype.highlight;\n/** @type {?} */\nHighlightDirective.prototype.hljsClass;\n/** @type {?} */\nHighlightDirective.prototype.renderer;\n/** @type {?} */\nHighlightDirective.prototype.hl;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["HighlightFactory","options","HighlightService","OPTIONS","InjectionToken","this","theme","path","auto","ready$","BehaviorSubject","Object","assign","loadScript","loadTheme","prototype","_this","script","document","createElement","async","type","onload","next","src","head","appendChild","style","rel","href","decorators","Injectable","ctorParameters","undefined","Optional","Inject","args","HighlightDirective","el","renderer","hl","hljsClass","nativeElement","defineProperty","set","code","filter","ready","take","subscribe","highlightElement","ngOnInit","highlightTextContent","domObs","MutationObserver","observe","childList","subtree","highlight","highlightChildren","tagName","toLowerCase","innerText","trim","console","warn","highlightedCode","hljs","highlightAuto","value","innerHTML","setProperty","selector","codeElements","querySelectorAll","from","childNodes","length","nodeName","map","codeElement","ngOnDestroy","disconnect","Directive","ElementRef","Renderer2","propDecorators","Input","setCode","HostBinding","HighlightModule","forRoot","ngModule","providers","provide","useValue","useFactory","deps","NgModule","declarations","exports"],"mappings":"osBAQA,SAAAA,kBAHCC,SAIC,MAHO,IAAIC,kBAAiBD,SCFvB,GAAME,SAAU,GAAIC,eAA3BA,eAA2D,WAG3DF,iBAAA,WAcA,QAAAA,kBADeD,SAXbI,KAAFJ,SACIK,MAEO,SADPC,KAEM,kBADNC,MAEM,GAGVH,KAAAI,OACG,GAAAC,sBADHA,iBACG,GAKCL,KAAKJ,QAATU,OAAAC,UAAuBP,KAAKJ,QAAYA,SAGpCI,KAAKQ,aACLR,KAAKS,kBAKTZ,kBAAAa,UAAAF,WAAA,WAAA,GAAAG,OAAAX,KAFUY,OAASC,SAASC,cAAc,SAItCF,QAHOG,OAAQ,EAIfH,OAHOI,KAAO,kBAIdJ,OAHOK,OAAS,WAIdN,MAHKP,OAAOc,MAAK,IAKnBN,OAHOO,IAAMnB,KAAQJ,QAAQM,KAGjC,qBACIW,SAHSO,KAAKC,YAAYT,SAQ9Bf,iBAAAa,UAAAD,UAAA,WACI,GALMa,OAAQT,SAASC,cAAc,OAMrCQ,OALMC,IAAM,aAMZD,MALMN,KAAO,WAMbM,MALME,KAAOxB,KAAQJ,QAAQM,KAKjC,WALsCF,KAAeJ,QAAQK,MAK7D,OACIY,SALSO,KAAKC,YAAYC,2BAGvBzB,kBAAP4B,aACET,KAAMU,cAKRA,aAFC7B,iBAAD8B,eAAC,WAAA,QAQAX,SAAMY,GAAWH,aAAeT,KAAMa,cAAvCA,WAAqDb,KAAMc,cAA3DA,OAAmEC,MAAOjC,aC7C1E,IAAAkC,oBAAA,WAkCA,QAAAA,oBARuEC,GAS/DC,SACAC,IADAnC,KAARkC,SAAQA,SACAlC,KAARmC,GAAQA,GARLnC,KAAHoC,WAAe,EASXpC,KAAKiC,GAAKA,GAAGI,oBAfjB/B,QAAAgC,eAAIN,mBAAJtB,UAAA,WAAA6B,IAAA,SAFYC,MAEZ,GAAA7B,OAAAX,IACIA,MAFIwC,KAAAA,KACJxC,KAAAmC,GAAA/B,OAAAqC,OAAA,SAAAC,OAAA,MAAAA,SAAAC,KAAA,GAGGC,UAAU,WAAM,MAAAjC,OAAKkC,iBAAiBlC,MAAKsB,GAAIO,yCAiBtDR,mBAAAtB,UAAAoC,SAAA,WAAA,GAAAnC,OAAAX,MAGSA,KAVKwC,MAAOxC,KAAAmC,GAAAvC,QAAAO,MAYfH,KAVImC,GAAA/B,OAWDqC,OAAO,SAAAC,OAAS,MAAAA,SAAOC,KAAK,GAC5BC,UAVO,WAYNjC,MAAKoC,uBAPLpC,MAAEqC,OAAA,GAAAC,kBAAA,WAAA,MAAAtC,OAAAoC,yBACNpC,MAAAqC,OAAAE,QAAAvC,MAAAsB,IAAAkB,WAAA,EAAAC,SAAA,OAkBNpB,mBAAAtB,UAAAqC,qBAAA,WACS/C,KAZEqD,UAmBuB,QAAnBrD,KAAKqD,UAMdrD,KAAKsD,kBAAkBtD,KAAKiC,GAAI,YAOhCjC,KAAKsD,kBAAkBtD,KAAKiC,GAAIjC,KAAKqD,WA9B5B,SAAPrD,KAAOiC,GAAAsB,QAAAC,cAaPxD,KAAK6C,iBAZS7C,KAAAiC,GAAAjC,KAAAiC,GAAAwB,UAAAC,QAEhBC,QAAUC,KAAK,kEAoCrB5B,mBAAAtB,UAAAmC,iBAAA,SAAiBZ,GAhBPO,MAkBN,GAhBoBqB,iBAAoBC,KAAAC,cAAAvB,MAAAwB,KAEtCH,mBAAA5B,GAAAgC,WAiBAjE,KAAKkC,SAASgC,YAAYjC,GAAI,YAAa4B,kBASjD7B,mBAAAtB,UAAA4C,kBAAA,SAAkBrB,GApBRkC,UAoBV,GAAAxD,OAAAX,KAE2BoE,aAAenC,GAAGoC,iBAAiBF,SAG1DG,sBAAJA,KApBQF,cAqBD3B,OApBO,SAAAD,MAAiB,MAAyB,KAAzBA,KAAW+B,WAACC,QAA+B,UAARhC,KAAQ+B,WAAA,GAAAE,WAqBnEC,IApBE,SAAAC,aACDhE,MAAKkC,iBAAE8B,YAAAA,YAAAlB,UAAAC,UAsBRf,KAAK,GACLC,aAKPZ,mBAAAtB,UAAAkE,YAAA,YApBM5E,KAAAwC,MAAAxC,KAAAmC,GAAAvC,QAAAO,MACFH,KAAAgD,OAAA6B,mCAyBG7C,oBAAPP,aArBET,KAAK8D,cAsBPA,UAtBO/C,OACLoC,SAAA,kBA4BKnC,mBAAPL,eAAwF,WAAM,QAC7FX,KAAM+D,cAAPA,aACC/D,KAxBEgE,cAwBHA,YACChE,KAxBMnB,oBA0BAmC,mBAAPiD,gBACA5B,YAxBgBrC,KAAMkE,cAwBtBA,QACAC,UAxBGnE,KAAAkE,cAwBHA,MAxBGnD,MAAA,UAyBHK,YAAgBpB,KAAMoE,cAAtBA,YAAmCrD,MAAO,gBFrJ1C,IAAAsD,iBAAA,WAAA,QAAAA,0BAAGA,iBAAHC,QAKA,SALG1F,SAMC,OACE2F,SALUF,gBAMVG,YACGC,QALS3F,QAAS4F,SAAU9F,UAO3B6F,QALS5F,iBAMT8F,WALYhG,iBAMZiG,MALM9F,+BAKTuF,iBAAP5D,aACET,KAAM6E,cAKRA,SALkB9D,OAMhB+D,cALc9D,oBAMd+D,SALS/D,wBAIVqD,gBAAD1D,eAAC,WAAA"}