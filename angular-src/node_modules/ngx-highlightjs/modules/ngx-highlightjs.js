import { Directive, ElementRef, HostBinding, Inject, Injectable, InjectionToken, Input, NgModule, Optional, Renderer2 } from '@angular/core';
import { BehaviorSubject } from 'rxjs/BehaviorSubject';
import { from } from 'rxjs/observable/from';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/take';
import 'rxjs/add/operator/filter';

const OPTIONS = new InjectionToken('OPTIONS');
class HighlightService {
    /**
     * @param {?} options
     */
    constructor(options) {
        this.options = {
            theme: 'github',
            path: 'assets/lib/hljs',
            auto: true
        };
        /**
         * hljs script on load event
         */
        this.ready$ = new BehaviorSubject(false);
        this.options = Object.assign({}, this.options, options);
        /** Load hljs script and style only once */
        this.loadScript();
        this.loadTheme();
    }
    /**
     * @return {?}
     */
    loadScript() {
        const /** @type {?} */ script = document.createElement('script');
        script.async = true;
        script.type = 'text/javascript';
        script.onload = () => {
            this.ready$.next(true);
        };
        script.src = `${this.options.path}/highlight.pack.js`;
        document.head.appendChild(script);
    }
    /**
     * @return {?}
     */
    loadTheme() {
        const /** @type {?} */ style = document.createElement('link');
        style.rel = 'stylesheet';
        style.type = 'text/css';
        style.href = `${this.options.path}/styles/${this.options.theme}.css`;
        document.head.appendChild(style);
    }
}
HighlightService.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
HighlightService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [OPTIONS,] },] },
];

/**
 * There are 2 ways to highlight code
 1 - Directly using the code input (default)
 2 - Indirectly using element text content (used of code input is undefined)
 */
class HighlightDirective {
    /**
     * @param {?} el
     * @param {?} renderer
     * @param {?} hl
     */
    constructor(el, renderer, hl) {
        this.renderer = renderer;
        this.hl = hl;
        this.hljsClass = true;
        this.el = el.nativeElement;
    }
    /**
     * Highlight code directly
     * @param {?} code
     * @return {?}
     */
    set setCode(code) {
        this.code = code;
        this.hl.ready$.filter(ready => ready).take(1)
            .subscribe(() => this.highlightElement(this.el, code));
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        /** If code is undefined, highlight using element text content */
        if (!this.code && this.hl.options.auto) {
            this.hl.ready$
                .filter(ready => ready).take(1)
                .subscribe(() => {
                this.highlightTextContent();
                /** Highlight when text content changes */
                this.domObs = new MutationObserver(() => this.highlightTextContent());
                this.domObs.observe(this.el, { childList: true, subtree: true });
            });
        }
    }
    /**
     * Highlight using element text content
     * @return {?}
     */
    highlightTextContent() {
        if (!this.highlight) {
            /** <code highlight [textContent]="code"></code> */
            if (this.el.tagName.toLowerCase() === 'code') {
                this.highlightElement(this.el, this.el.innerText.trim());
            }
            else {
                console.warn(`[HighlightDirective]: Use 'highlight' on <code> elements only`);
            }
        }
        else if (this.highlight === 'all') {
            /** <div highlight="all">
             *    <pre><code [textContent]="code"></code></pre>
             *    <pre><code [textContent]="code"></code></pre>
             *  </div>
             */
            this.highlightChildren(this.el, 'pre code');
        }
        else {
            /** <div highlight="section code">
             *    <section><code [textContent]="code"></code></section>
             *    <section><code [textContent]="code"></code></section>
             *  </div>
             */
            this.highlightChildren(this.el, this.highlight);
        }
    }
    /**
     * Highlight single element
     * @param {?} el
     * @param {?} code
     * @return {?}
     */
    highlightElement(el, code) {
        const /** @type {?} */ highlightedCode = hljs.highlightAuto(code).value;
        if (highlightedCode !== el.innerHTML) {
            this.renderer.setProperty(el, 'innerHTML', highlightedCode);
        }
    }
    /**
     * Highlight children
     * @param {?} el
     * @param {?} selector
     * @return {?}
     */
    highlightChildren(el, selector) {
        const /** @type {?} */ codeElements = el.querySelectorAll(selector);
        /** highlight all children with the same selector */
        from(codeElements)
            .filter((code) => code.childNodes.length === 1 && code.childNodes[0].nodeName === '#text')
            .map((codeElement) => {
            this.highlightElement(codeElement, codeElement.innerText.trim());
        })
            .take(1)
            .subscribe();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        /** Disconnect MutationObserver */
        if (!this.code && this.hl.options.auto) {
            this.domObs.disconnect();
        }
    }
}
HighlightDirective.decorators = [
    { type: Directive, args: [{
                selector: '[highlight]'
            },] },
];
/**
 * @nocollapse
 */
HighlightDirective.ctorParameters = () => [
    { type: ElementRef, },
    { type: Renderer2, },
    { type: HighlightService, },
];
HighlightDirective.propDecorators = {
    'highlight': [{ type: Input },],
    'setCode': [{ type: Input, args: ['code',] },],
    'hljsClass': [{ type: HostBinding, args: ['class.hljs',] },],
};

/**
 * @param {?} options
 * @return {?}
 */
function HighlightFactory(options) {
    return new HighlightService(options);
}
class HighlightModule {
    /**
     * @param {?=} options
     * @return {?}
     */
    static forRoot(options) {
        return {
            ngModule: HighlightModule,
            providers: [
                { provide: OPTIONS, useValue: options },
                {
                    provide: HighlightService,
                    useFactory: HighlightFactory,
                    deps: [OPTIONS]
                }
            ]
        };
    }
}
HighlightModule.decorators = [
    { type: NgModule, args: [{
                declarations: [HighlightDirective],
                exports: [HighlightDirective]
            },] },
];
/**
 * @nocollapse
 */
HighlightModule.ctorParameters = () => [];

/**
 * Generated bundle index. Do not edit.
 */

export { HighlightModule, HighlightDirective as ɵb, HighlightFactory as ɵa, HighlightService as ɵd, OPTIONS as ɵc };
//# sourceMappingURL=ngx-highlightjs.js.map
